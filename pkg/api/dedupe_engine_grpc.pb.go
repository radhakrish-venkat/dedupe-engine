// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/api/dedupe_engine.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackupService_StreamBackup_FullMethodName      = "/dedupe_engine.BackupService/StreamBackup"
	BackupService_InitiateRestore_FullMethodName   = "/dedupe_engine.BackupService/InitiateRestore"
	BackupService_StreamRestoreData_FullMethodName = "/dedupe_engine.BackupService/StreamRestoreData"
)

// BackupServiceClient is the client API for BackupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Defines the service for stream handler-to-ingest node communication
type BackupServiceClient interface {
	// Stream for initiating a backup and sending data chunks.
	// Stream Handler sends BackupRequest messages and receives BackupResponse messages.
	StreamBackup(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BackupRequest, BackupResponse], error)
	// RPC for initiating a restore operation.
	InitiateRestore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error)
	// RPC for streaming restored data back to the client/stream handler.
	StreamRestoreData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RestoreDataRequest, RestoreDataResponse], error)
}

type backupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackupServiceClient(cc grpc.ClientConnInterface) BackupServiceClient {
	return &backupServiceClient{cc}
}

func (c *backupServiceClient) StreamBackup(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BackupRequest, BackupResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BackupService_ServiceDesc.Streams[0], BackupService_StreamBackup_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BackupRequest, BackupResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BackupService_StreamBackupClient = grpc.BidiStreamingClient[BackupRequest, BackupResponse]

func (c *backupServiceClient) InitiateRestore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreResponse)
	err := c.cc.Invoke(ctx, BackupService_InitiateRestore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupServiceClient) StreamRestoreData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RestoreDataRequest, RestoreDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BackupService_ServiceDesc.Streams[1], BackupService_StreamRestoreData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RestoreDataRequest, RestoreDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BackupService_StreamRestoreDataClient = grpc.BidiStreamingClient[RestoreDataRequest, RestoreDataResponse]

// BackupServiceServer is the server API for BackupService service.
// All implementations must embed UnimplementedBackupServiceServer
// for forward compatibility.
//
// Defines the service for stream handler-to-ingest node communication
type BackupServiceServer interface {
	// Stream for initiating a backup and sending data chunks.
	// Stream Handler sends BackupRequest messages and receives BackupResponse messages.
	StreamBackup(grpc.BidiStreamingServer[BackupRequest, BackupResponse]) error
	// RPC for initiating a restore operation.
	InitiateRestore(context.Context, *RestoreRequest) (*RestoreResponse, error)
	// RPC for streaming restored data back to the client/stream handler.
	StreamRestoreData(grpc.BidiStreamingServer[RestoreDataRequest, RestoreDataResponse]) error
	mustEmbedUnimplementedBackupServiceServer()
}

// UnimplementedBackupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackupServiceServer struct{}

func (UnimplementedBackupServiceServer) StreamBackup(grpc.BidiStreamingServer[BackupRequest, BackupResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBackup not implemented")
}
func (UnimplementedBackupServiceServer) InitiateRestore(context.Context, *RestoreRequest) (*RestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateRestore not implemented")
}
func (UnimplementedBackupServiceServer) StreamRestoreData(grpc.BidiStreamingServer[RestoreDataRequest, RestoreDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRestoreData not implemented")
}
func (UnimplementedBackupServiceServer) mustEmbedUnimplementedBackupServiceServer() {}
func (UnimplementedBackupServiceServer) testEmbeddedByValue()                       {}

// UnsafeBackupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackupServiceServer will
// result in compilation errors.
type UnsafeBackupServiceServer interface {
	mustEmbedUnimplementedBackupServiceServer()
}

func RegisterBackupServiceServer(s grpc.ServiceRegistrar, srv BackupServiceServer) {
	// If the following call pancis, it indicates UnimplementedBackupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackupService_ServiceDesc, srv)
}

func _BackupService_StreamBackup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BackupServiceServer).StreamBackup(&grpc.GenericServerStream[BackupRequest, BackupResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BackupService_StreamBackupServer = grpc.BidiStreamingServer[BackupRequest, BackupResponse]

func _BackupService_InitiateRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServiceServer).InitiateRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupService_InitiateRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServiceServer).InitiateRestore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupService_StreamRestoreData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BackupServiceServer).StreamRestoreData(&grpc.GenericServerStream[RestoreDataRequest, RestoreDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BackupService_StreamRestoreDataServer = grpc.BidiStreamingServer[RestoreDataRequest, RestoreDataResponse]

// BackupService_ServiceDesc is the grpc.ServiceDesc for BackupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dedupe_engine.BackupService",
	HandlerType: (*BackupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateRestore",
			Handler:    _BackupService_InitiateRestore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBackup",
			Handler:       _BackupService_StreamBackup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamRestoreData",
			Handler:       _BackupService_StreamRestoreData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/dedupe_engine.proto",
}
